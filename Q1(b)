/*----------------------------------------------------------
  Q1(b) - Menu Driven Program for Doubly Linked List
  Operations: Insert, Delete, Search
-----------------------------------------------------------*/

#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;
    Node(int val) {
        data = val;
        next = prev = nullptr;
    }
};

class DoublyLinkedList {
    Node* head;
public:
    DoublyLinkedList() { head = nullptr; }

    void insertFirst(int val) {
        Node* newNode = new Node(val);
        if (head)
            head->prev = newNode;
        newNode->next = head;
        head = newNode;
    }

    void insertLast(int val) {
        Node* newNode = new Node(val);
        if (!head) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next)
            temp = temp->next;
        temp->next = newNode;
        newNode->prev = temp;
    }

    void insertAfter(int key, int val) {
        Node* temp = head;
        while (temp && temp->data != key)
            temp = temp->next;
        if (!temp) {
            cout << "Key not found!\n";
            return;
        }
        Node* newNode = new Node(val);
        newNode->next = temp->next;
        if (temp->next)
            temp->next->prev = newNode;
        temp->next = newNode;
        newNode->prev = temp;
    }

    void deleteNode(int key) {
        Node* temp = head;
        while (temp && temp->data != key)
            temp = temp->next;
        if (!temp) {
            cout << "Node not found!\n";
            return;
        }
        if (temp->prev)
            temp->prev->next = temp->next;
        else
            head = temp->next;
        if (temp->next)
            temp->next->prev = temp->prev;
        delete temp;
    }

    void search(int key) {
        Node* temp = head;
        while (temp) {
            if (temp->data == key) {
                cout << "Node found!\n";
                return;
            }
            temp = temp->next;
        }
        cout << "Node not found!\n";
    }

    void display() {
        Node* temp = head;
        cout << "Doubly Linked List: ";
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    DoublyLinkedList dll;
    int choice, val, key;
    do {
        cout << "\n--- Doubly Linked List Menu ---\n";
        cout << "1. Insert at Beginning\n2. Insert at End\n3. Insert After\n";
        cout << "4. Delete Node\n5. Search Node\n6. Display\n7. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1: cout << "Enter value: "; cin >> val; dll.insertFirst(val); break;
            case 2: cout << "Enter value: "; cin >> val; dll.insertLast(val); break;
            case 3: cout << "Enter key and value: "; cin >> key >> val; dll.insertAfter(key, val); break;
            case 4: cout << "Enter value to delete: "; cin >> val; dll.deleteNode(val); break;
            case 5: cout << "Enter value to search: "; cin >> val; dll.search(val); break;
            case 6: dll.display(); break;
        }
    } while (choice != 7);
    return 0;
}
