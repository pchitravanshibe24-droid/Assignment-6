 /*----Q1(a) - Menu Driven Program for Circular Linked List
  Operations: Insert, Delete, Search
-----------------------------------------------------------*/

#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

class CircularLinkedList {
    Node* head;
public:
    CircularLinkedList() {
        head = nullptr;
    }

    void insertFirst(int val) {
        Node* newNode = new Node(val);
        if (!head) {
            head = newNode;
            head->next = head;
            return;
        }
        Node* temp = head;
        while (temp->next != head)
            temp = temp->next;
        temp->next = newNode;
        newNode->next = head;
        head = newNode;
    }

    void insertLast(int val) {
        Node* newNode = new Node(val);
        if (!head) {
            head = newNode;
            head->next = head;
            return;
        }
        Node* temp = head;
        while (temp->next != head)
            temp = temp->next;
        temp->next = newNode;
        newNode->next = head;
    }

    void insertAfter(int key, int val) {
        if (!head) return;
        Node* temp = head;
        do {
            if (temp->data == key) {
                Node* newNode = new Node(val);
                newNode->next = temp->next;
                temp->next = newNode;
                return;
            }
            temp = temp->next;
        } while (temp != head);
        cout << "Key not found!\n";
    }

    void deleteNode(int key) {
        if (!head) return;

        Node *curr = head, *prev = nullptr;
        while (curr->data != key) {
            if (curr->next == head) {
                cout << "Node not found!\n";
                return;
            }
            prev = curr;
            curr = curr->next;
        }

        if (curr == head && curr->next == head) {
            head = nullptr;
            delete curr;
            return;
        }

        if (curr == head) {
            Node* temp = head;
            while (temp->next != head)
                temp = temp->next;
            head = head->next;
            temp->next = head;
            delete curr;
        } else {
            prev->next = curr->next;
            delete curr;
        }
    }

    void search(int key) {
        if (!head) {
            cout << "List is empty!\n";
            return;
        }
        Node* temp = head;
        do {
            if (temp->data == key) {
                cout << "Node found!\n";
                return;
            }
            temp = temp->next;
        } while (temp != head);
        cout << "Node not found!\n";
    }

    void display() {
        if (!head) {
            cout << "List is empty!\n";
            return;
        }
        Node* temp = head;
        cout << "Circular Linked List: ";
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << endl;
    }
};

int main() {
    CircularLinkedList cll;
    int choice, val, key;

    do {
        cout << "\n--- Circular Linked List Menu ---\n";
        cout << "1. Insert at Beginning\n2. Insert at End\n3. Insert After Node\n";
        cout << "4. Delete Node\n5. Search Node\n6. Display\n7. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1: cout << "Enter value: "; cin >> val; cll.insertFirst(val); break;
            case 2: cout << "Enter value: "; cin >> val; cll.insertLast(val); break;
            case 3: cout << "Enter key and value: "; cin >> key >> val; cll.insertAfter(key, val); break;
            case 4: cout << "Enter value to delete: "; cin >> val; cll.deleteNode(val); break;
            case 5: cout << "Enter value to search: "; cin >> val; cll.search(val); break;
            case 6: cll.display(); break;
        }
    } while (choice != 7);

    return 0;
}
